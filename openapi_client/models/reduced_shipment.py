# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.reduced_shipment_item import ReducedShipmentItem
from openapi_client.models.reduced_shipment_order import ReducedShipmentOrder
from openapi_client.models.reduced_transport import ReducedTransport
from typing import Optional, Set
from typing_extensions import Self

class ReducedShipment(BaseModel):
    """
    ReducedShipment
    """ # noqa: E501
    shipment_id: StrictStr = Field(description="A unique identifier for this shipment.", alias="shipmentId")
    shipment_date_time: Optional[datetime] = Field(default=None, description="The date and time in ISO 8601 format when the order item was shipped.", alias="shipmentDateTime")
    shipment_reference: StrictStr = Field(description="Reference supplied by the user when this item was shipped.", alias="shipmentReference")
    order: ReducedShipmentOrder
    shipment_items: List[ReducedShipmentItem] = Field(alias="shipmentItems")
    transport: ReducedTransport
    __properties: ClassVar[List[str]] = ["shipmentId", "shipmentDateTime", "shipmentReference", "order", "shipmentItems", "transport"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReducedShipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_items (list)
        _items = []
        if self.shipment_items:
            for _item in self.shipment_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shipmentItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of transport
        if self.transport:
            _dict['transport'] = self.transport.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReducedShipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shipmentId": obj.get("shipmentId"),
            "shipmentDateTime": obj.get("shipmentDateTime"),
            "shipmentReference": obj.get("shipmentReference"),
            "order": ReducedShipmentOrder.from_dict(obj["order"]) if obj.get("order") is not None else None,
            "shipmentItems": [ReducedShipmentItem.from_dict(_item) for _item in obj["shipmentItems"]] if obj.get("shipmentItems") is not None else None,
            "transport": ReducedTransport.from_dict(obj["transport"]) if obj.get("transport") is not None else None
        })
        return _obj


