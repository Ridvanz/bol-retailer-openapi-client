# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OrderFulfilment(BaseModel):
    """
    OrderFulfilment
    """ # noqa: E501
    method: StrictStr = Field(description="The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).")
    distribution_party: Optional[StrictStr] = Field(default=None, description="The party that manages the distribution, either bol.com or the retailer itself.", alias="distributionParty")
    latest_delivery_date: Optional[date] = Field(default=None, description="The ultimate delivery date at which this order must be delivered at the customer's shipping address. This field is empty in case the exactDeliveryDate is filled.", alias="latestDeliveryDate")
    exact_delivery_date: Optional[date] = Field(default=None, description="The exact delivery date at which this order must be delivered at the customer's shipping address. This field is only filled when the customer chose an exact date for delivery. This field is empty in case the latestDeliveryDate is filled.", alias="exactDeliveryDate")
    expiry_date: Optional[date] = Field(default=None, description="The date this order item will automatically expire and thereby cancelling this order item from the order.", alias="expiryDate")
    time_frame_type: StrictStr = Field(description="Delivery option selected by the customer.", alias="timeFrameType")
    __properties: ClassVar[List[str]] = ["method", "distributionParty", "latestDeliveryDate", "exactDeliveryDate", "expiryDate", "timeFrameType"]

    @field_validator('distribution_party')
    def distribution_party_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RETAILER', 'BOL']):
            raise ValueError("must be one of enum values ('RETAILER', 'BOL')")
        return value

    @field_validator('time_frame_type')
    def time_frame_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['REGULAR', 'EVENING', 'APPOINTMENT', 'SAMEDAY', 'SUNDAY']):
            raise ValueError("must be one of enum values ('REGULAR', 'EVENING', 'APPOINTMENT', 'SAMEDAY', 'SUNDAY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderFulfilment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderFulfilment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "method": obj.get("method"),
            "distributionParty": obj.get("distributionParty"),
            "latestDeliveryDate": obj.get("latestDeliveryDate"),
            "exactDeliveryDate": obj.get("exactDeliveryDate"),
            "expiryDate": obj.get("expiryDate"),
            "timeFrameType": obj.get("timeFrameType")
        })
        return _obj


