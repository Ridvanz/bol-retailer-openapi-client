# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.return_processing_result import ReturnProcessingResult
from openapi_client.models.return_reason import ReturnReason
from typing import Optional, Set
from typing_extensions import Self

class ReducedReturnItem(BaseModel):
    """
    ReducedReturnItem
    """ # noqa: E501
    rma_id: StrictStr = Field(description="The RMA (Return Merchandise Authorization) identifier of the return.", alias="rmaId")
    order_id: StrictStr = Field(description="The id of the customer order this return item is in.", alias="orderId")
    ean: StrictStr = Field(description="The EAN number associated with this product.")
    expected_quantity: StrictInt = Field(description="The quantity that is expected to be returned by the customer. Note: this can be greater than 1 in case the customer ordered a quantity greater than 1 of the same product in the same customer order.", alias="expectedQuantity")
    return_reason: ReturnReason = Field(alias="returnReason")
    handled: StrictBool = Field(description="Indicates if this return item has been handled (by the retailer).")
    processing_results: List[ReturnProcessingResult] = Field(alias="processingResults")
    __properties: ClassVar[List[str]] = ["rmaId", "orderId", "ean", "expectedQuantity", "returnReason", "handled", "processingResults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReducedReturnItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of return_reason
        if self.return_reason:
            _dict['returnReason'] = self.return_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in processing_results (list)
        _items = []
        if self.processing_results:
            for _item in self.processing_results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['processingResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReducedReturnItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rmaId": obj.get("rmaId"),
            "orderId": obj.get("orderId"),
            "ean": obj.get("ean"),
            "expectedQuantity": obj.get("expectedQuantity"),
            "returnReason": ReturnReason.from_dict(obj["returnReason"]) if obj.get("returnReason") is not None else None,
            "handled": obj.get("handled"),
            "processingResults": [ReturnProcessingResult.from_dict(_item) for _item in obj["processingResults"]] if obj.get("processingResults") is not None else None
        })
        return _obj


