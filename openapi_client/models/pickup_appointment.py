# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.replenishment_pickup_time_slot import ReplenishmentPickupTimeSlot
from typing import Optional, Set
from typing_extensions import Self

class PickupAppointment(BaseModel):
    """
    PickupAppointment
    """ # noqa: E501
    comment_to_transporter: Optional[StrictStr] = Field(default=None, description="A comment to the transporter regarding the pickup appointment.", alias="commentToTransporter")
    address: Address
    pickup_time_slot: ReplenishmentPickupTimeSlot = Field(alias="pickupTimeSlot")
    pickup_date_time: Optional[datetime] = Field(default=None, description="The date and time in ISO 8601 format when this replenishment was picked up by the transporter.", alias="pickupDateTime")
    cancellation_reason: Optional[StrictStr] = Field(default=None, description="In case of a pickup cancellation this field indicates the reason for cancelling this pickup.", alias="cancellationReason")
    __properties: ClassVar[List[str]] = ["commentToTransporter", "address", "pickupTimeSlot", "pickupDateTime", "cancellationReason"]

    @field_validator('cancellation_reason')
    def cancellation_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_ADDRESS', 'NOT_READY', 'NO_LABEL', 'WRONG_PACKAGE', 'NOT_AT_HOME', 'OTHER_REASON', 'REQUEST_FROM_RETAILER']):
            raise ValueError("must be one of enum values ('UNKNOWN_ADDRESS', 'NOT_READY', 'NO_LABEL', 'WRONG_PACKAGE', 'NOT_AT_HOME', 'OTHER_REASON', 'REQUEST_FROM_RETAILER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PickupAppointment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pickup_time_slot
        if self.pickup_time_slot:
            _dict['pickupTimeSlot'] = self.pickup_time_slot.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PickupAppointment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commentToTransporter": obj.get("commentToTransporter"),
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "pickupTimeSlot": ReplenishmentPickupTimeSlot.from_dict(obj["pickupTimeSlot"]) if obj.get("pickupTimeSlot") is not None else None,
            "pickupDateTime": obj.get("pickupDateTime"),
            "cancellationReason": obj.get("cancellationReason")
        })
        return _obj


