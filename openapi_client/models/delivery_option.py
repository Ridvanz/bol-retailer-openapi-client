# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.handover_details import HandoverDetails
from openapi_client.models.label_price import LabelPrice
from openapi_client.models.package_restrictions import PackageRestrictions
from typing import Optional, Set
from typing_extensions import Self

class DeliveryOption(BaseModel):
    """
    A delivery option shows how and the costs of a transport for a shippable configuration
    """ # noqa: E501
    shipping_label_offer_id: StrictStr = Field(description="Unique identifier for the shipping label offer.", alias="shippingLabelOfferId")
    recommended: StrictBool = Field(description="Indicates whether this delivery option is recommended to be the best option to ship your order item(s) with.")
    valid_until_date: Optional[date] = Field(default=None, description="The date until the delivery option (incl total price) is valid.", alias="validUntilDate")
    transporter_code: StrictStr = Field(description="A code representing the transporter which is being used for transportation.", alias="transporterCode")
    label_type: StrictStr = Field(description="The type of the label, representing the way an item is being transported. MAILBOX is a mailbox package with delivery scan. MAILBOX_LIGHT is a mailbox package without delivery scan. PARCEL is a normal package.", alias="labelType")
    label_display_name: StrictStr = Field(description="The display name of the shipping label.", alias="labelDisplayName")
    label_price: LabelPrice = Field(alias="labelPrice")
    package_restrictions: PackageRestrictions = Field(alias="packageRestrictions")
    handover_details: Optional[HandoverDetails] = Field(default=None, alias="handoverDetails")
    __properties: ClassVar[List[str]] = ["shippingLabelOfferId", "recommended", "validUntilDate", "transporterCode", "labelType", "labelDisplayName", "labelPrice", "packageRestrictions", "handoverDetails"]

    @field_validator('label_type')
    def label_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PARCEL', 'MAILBOX', 'MAILBOX_LIGHT']):
            raise ValueError("must be one of enum values ('PARCEL', 'MAILBOX', 'MAILBOX_LIGHT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliveryOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of label_price
        if self.label_price:
            _dict['labelPrice'] = self.label_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of package_restrictions
        if self.package_restrictions:
            _dict['packageRestrictions'] = self.package_restrictions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of handover_details
        if self.handover_details:
            _dict['handoverDetails'] = self.handover_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliveryOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shippingLabelOfferId": obj.get("shippingLabelOfferId"),
            "recommended": obj.get("recommended"),
            "validUntilDate": obj.get("validUntilDate"),
            "transporterCode": obj.get("transporterCode"),
            "labelType": obj.get("labelType"),
            "labelDisplayName": obj.get("labelDisplayName"),
            "labelPrice": LabelPrice.from_dict(obj["labelPrice"]) if obj.get("labelPrice") is not None else None,
            "packageRestrictions": PackageRestrictions.from_dict(obj["packageRestrictions"]) if obj.get("packageRestrictions") is not None else None,
            "handoverDetails": HandoverDetails.from_dict(obj["handoverDetails"]) if obj.get("handoverDetails") is not None else None
        })
        return _obj


