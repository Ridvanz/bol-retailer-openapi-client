# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.link import Link
from typing import Optional, Set
from typing_extensions import Self

class ProcessStatus(BaseModel):
    """
    ProcessStatus
    """ # noqa: E501
    process_status_id: Optional[StrictStr] = Field(default=None, description="The process status id.", alias="processStatusId")
    entity_id: Optional[StrictStr] = Field(default=None, description="The id of the object being processed. For example, in case of a shipment process id, you will receive the id of the order item being processed.", alias="entityId")
    event_type: StrictStr = Field(description="Name of the requested action that is being processed.", alias="eventType")
    description: StrictStr = Field(description="Describes the action that is being processed.")
    status: StrictStr = Field(description="Status of the action being processed.")
    error_message: Optional[StrictStr] = Field(default=None, description="Shows error message if applicable.", alias="errorMessage")
    create_timestamp: datetime = Field(description="Time of creation of the response.", alias="createTimestamp")
    links: List[Link] = Field(description="Lists available actions applicable to this endpoint.")
    __properties: ClassVar[List[str]] = ["processStatusId", "entityId", "eventType", "description", "status", "errorMessage", "createTimestamp", "links"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PENDING', 'SUCCESS', 'FAILURE', 'TIMEOUT']):
            raise ValueError("must be one of enum values ('PENDING', 'SUCCESS', 'FAILURE', 'TIMEOUT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProcessStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProcessStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "processStatusId": obj.get("processStatusId"),
            "entityId": obj.get("entityId"),
            "eventType": obj.get("eventType"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "errorMessage": obj.get("errorMessage"),
            "createTimestamp": obj.get("createTimestamp"),
            "links": [Link.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


