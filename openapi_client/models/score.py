# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class Score(BaseModel):
    """
    The score for this measurement. In case there are no scores for an indicator, this element is omitted from the response.
    """ # noqa: E501
    conforms: StrictBool = Field(description="Indicates whether the score conforms to the bol.com service norm or not.")
    numerator: StrictInt = Field(description="The top part of the fraction (above the line). This usually is the smaller number compared to the denominator.")
    denominator: StrictInt = Field(description="The lower part of the fraction (below the line). This usually is the larger number compared to the the numerator.")
    value: Union[StrictFloat, StrictInt] = Field(description="The score for this measurement (denominator divided by the numerator).")
    distance_to_norm: Union[StrictFloat, StrictInt] = Field(description="The difference between the score and the bol.com service norm.", alias="distanceToNorm")
    __properties: ClassVar[List[str]] = ["conforms", "numerator", "denominator", "value", "distanceToNorm"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Score from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Score from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conforms": obj.get("conforms"),
            "numerator": obj.get("numerator"),
            "denominator": obj.get("denominator"),
            "value": obj.get("value"),
            "distanceToNorm": obj.get("distanceToNorm")
        })
        return _obj


