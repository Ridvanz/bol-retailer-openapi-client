# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.order_offer import OrderOffer
from openapi_client.models.order_product import OrderProduct
from openapi_client.models.shipment_fulfilment import ShipmentFulfilment
from typing import Optional, Set
from typing_extensions import Self

class ShipmentItem(BaseModel):
    """
    ShipmentItem
    """ # noqa: E501
    order_item_id: StrictStr = Field(description="A unique identifier for the item of the order that was shipped in this shipment.", alias="orderItemId")
    fulfilment: Optional[ShipmentFulfilment] = None
    offer: Optional[OrderOffer] = None
    product: Optional[OrderProduct] = None
    quantity: StrictInt = Field(description="Amount of the product being ordered.")
    unit_price: Union[StrictFloat, StrictInt] = Field(description="The selling price to the customer of a single unit including VAT.", alias="unitPrice")
    commission: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The commission.")
    __properties: ClassVar[List[str]] = ["orderItemId", "fulfilment", "offer", "product", "quantity", "unitPrice", "commission"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShipmentItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fulfilment
        if self.fulfilment:
            _dict['fulfilment'] = self.fulfilment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offer
        if self.offer:
            _dict['offer'] = self.offer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShipmentItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderItemId": obj.get("orderItemId"),
            "fulfilment": ShipmentFulfilment.from_dict(obj["fulfilment"]) if obj.get("fulfilment") is not None else None,
            "offer": OrderOffer.from_dict(obj["offer"]) if obj.get("offer") is not None else None,
            "product": OrderProduct.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "quantity": obj.get("quantity"),
            "unitPrice": obj.get("unitPrice"),
            "commission": obj.get("commission")
        })
        return _obj


