# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.product_list_filter_range import ProductListFilterRange
from openapi_client.models.product_list_filter_value import ProductListFilterValue
from typing import Optional, Set
from typing_extensions import Self

class ProductListRequest(BaseModel):
    """
    ProductListRequest
    """ # noqa: E501
    country_code: Optional[StrictStr] = Field(default='NL', description="The country for which the products will be retrieved.", alias="countryCode")
    search_term: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=50)]] = Field(default=None, description="The search term to get the associated products for.", alias="searchTerm")
    category_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=11)]] = Field(default=None, description="The category to get the associated products for.", alias="categoryId")
    filter_ranges: Optional[Annotated[List[ProductListFilterRange], Field(min_length=0, max_length=10)]] = Field(default=None, description="The list of range filters to get associated products for.", alias="filterRanges")
    filter_values: Optional[Annotated[List[ProductListFilterValue], Field(min_length=0, max_length=10)]] = Field(default=None, description="The list of filter values in this filter.", alias="filterValues")
    sort: Optional[StrictStr] = Field(default=None, description="Determines the order of the products.")
    page: Annotated[int, Field(le=200, strict=True, ge=1)] = Field(description="The requested page number with a page size of 50 items.")
    __properties: ClassVar[List[str]] = ["countryCode", "searchTerm", "categoryId", "filterRanges", "filterValues", "sort", "page"]

    @field_validator('country_code')
    def country_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NL', 'BE']):
            raise ValueError("must be one of enum values ('NL', 'BE')")
        return value

    @field_validator('sort')
    def sort_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RELEVANCE', 'POPULARITY', 'PRICE_ASC', 'PRICE_DESC', 'RELEASE_DATE', 'RATING', 'WISHLIST']):
            raise ValueError("must be one of enum values ('RELEVANCE', 'POPULARITY', 'PRICE_ASC', 'PRICE_DESC', 'RELEASE_DATE', 'RATING', 'WISHLIST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductListRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filter_ranges (list)
        _items = []
        if self.filter_ranges:
            for _item in self.filter_ranges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filterRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filter_values (list)
        _items = []
        if self.filter_values:
            for _item in self.filter_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filterValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductListRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "countryCode": obj.get("countryCode") if obj.get("countryCode") is not None else 'NL',
            "searchTerm": obj.get("searchTerm"),
            "categoryId": obj.get("categoryId"),
            "filterRanges": [ProductListFilterRange.from_dict(_item) for _item in obj["filterRanges"]] if obj.get("filterRanges") is not None else None,
            "filterValues": [ProductListFilterValue.from_dict(_item) for _item in obj["filterValues"]] if obj.get("filterValues") is not None else None,
            "sort": obj.get("sort"),
            "page": obj.get("page") if obj.get("page") is not None else 1
        })
        return _obj


