# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HandoverDetails(BaseModel):
    """
    HandoverDetails
    """ # noqa: E501
    meets_customer_expectation: Optional[StrictBool] = Field(default=None, description="Indicates if you can use this label without receiving a strike if you handover before the latestHandoverDateTime. If this field is 'false' you can still buy and use this label but it will have negative consequences on your performance score because the order will be delivered too early or too late.", alias="meetsCustomerExpectation")
    earliest_handover_date_time: Optional[datetime] = Field(default=None, description="The date and time at which the parcel can be earliest  at the transporter to make sure your parcel is delivered on time.", alias="earliestHandoverDateTime")
    latest_handover_date_time: Optional[datetime] = Field(default=None, description="The date and time at which the parcel must ultimately be at the transporter to make sure your parcel is delivered on time. If you handover after this date you will receive a strike because you order will be delivered too late.", alias="latestHandoverDateTime")
    collection_method: Optional[StrictStr] = Field(default=None, description="The type of collection for this parcel.", alias="collectionMethod")
    __properties: ClassVar[List[str]] = ["meetsCustomerExpectation", "earliestHandoverDateTime", "latestHandoverDateTime", "collectionMethod"]

    @field_validator('collection_method')
    def collection_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DROP_OFF', 'PICK_UP']):
            raise ValueError("must be one of enum values ('DROP_OFF', 'PICK_UP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HandoverDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HandoverDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "meetsCustomerExpectation": obj.get("meetsCustomerExpectation"),
            "earliestHandoverDateTime": obj.get("earliestHandoverDateTime"),
            "latestHandoverDateTime": obj.get("latestHandoverDateTime"),
            "collectionMethod": obj.get("collectionMethod")
        })
        return _obj


