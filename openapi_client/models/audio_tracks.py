# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AudioTracks(BaseModel):
    """
    AudioTracks
    """ # noqa: E501
    disc_number: Optional[StrictStr] = Field(default=None, description="The disc number within an album the audio track is stored on.", alias="discNumber")
    track_number: Optional[StrictStr] = Field(default=None, description="The track number on the album.", alias="trackNumber")
    disc_side: Optional[StrictStr] = Field(default=None, description="The disc side on which the audio track is stored on.", alias="discSide")
    title: Optional[StrictStr] = Field(default=None, description="The title of the audio track.")
    artist_name: Optional[StrictStr] = Field(default=None, description="The name of the artist(s) performing the audio track.", alias="artistName")
    play_time: Optional[StrictStr] = Field(default=None, description="The play time of the audio track.", alias="playTime")
    clip_url: Optional[StrictStr] = Field(default=None, description="The URL on which an audio clip of the audio track has been made available.", alias="clipUrl")
    clip_type: Optional[StrictStr] = Field(default=None, description="The format in which the audio clip is available.", alias="clipType")
    __properties: ClassVar[List[str]] = ["discNumber", "trackNumber", "discSide", "title", "artistName", "playTime", "clipUrl", "clipType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AudioTracks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AudioTracks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "discNumber": obj.get("discNumber"),
            "trackNumber": obj.get("trackNumber"),
            "discSide": obj.get("discSide"),
            "title": obj.get("title"),
            "artistName": obj.get("artistName"),
            "playTime": obj.get("playTime"),
            "clipUrl": obj.get("clipUrl"),
            "clipType": obj.get("clipType")
        })
        return _obj


