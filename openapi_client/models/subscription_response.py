# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionResponse(BaseModel):
    """
    SubscriptionResponse
    """ # noqa: E501
    id: StrictStr = Field(description="The unique identifier assigned to each event notification subscription. This ID is used for tracking and managing each subscription.")
    resources: List[StrictStr]
    url: StrictStr = Field(description="The destination for event notifications. For WEBHOOK subscription types, this is the URL where messages are posted to. For GCP_PUBSUB, this is the topic name.")
    subscription_type: StrictStr = Field(description="The type of subscription. It indicates the platform where the events will be subscribed to. Be aware that certain event types are only available for specific types.", alias="subscriptionType")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether the subscription is enabled and will receive notifications or not. Defaults to true.")
    __properties: ClassVar[List[str]] = ["id", "resources", "url", "subscriptionType", "enabled"]

    @field_validator('resources')
    def resources_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['TEST', 'PROCESS_STATUS', 'SHIPMENT', 'OFFER', 'PRICE_STAR_BOUNDARY', 'COMPETING_OFFER']):
                raise ValueError("each list item must be one of ('TEST', 'PROCESS_STATUS', 'SHIPMENT', 'OFFER', 'PRICE_STAR_BOUNDARY', 'COMPETING_OFFER')")
        return value

    @field_validator('subscription_type')
    def subscription_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['WEBHOOK', 'GCP_PUBSUB']):
            raise ValueError("must be one of enum values ('WEBHOOK', 'GCP_PUBSUB')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "resources": obj.get("resources"),
            "url": obj.get("url"),
            "subscriptionType": obj.get("subscriptionType"),
            "enabled": obj.get("enabled")
        })
        return _obj


