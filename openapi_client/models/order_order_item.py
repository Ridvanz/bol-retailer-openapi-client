# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.additional_service import AdditionalService
from openapi_client.models.order_fulfilment import OrderFulfilment
from openapi_client.models.order_offer import OrderOffer
from openapi_client.models.order_product import OrderProduct
from typing import Optional, Set
from typing_extensions import Self

class OrderOrderItem(BaseModel):
    """
    Order item details from an order.
    """ # noqa: E501
    order_item_id: StrictStr = Field(description="The id for the order item. One order can have multiple order items, but the list can only take one item.", alias="orderItemId")
    cancellation_request: StrictBool = Field(description="Indicates whether the order was cancelled on request of the customer before the retailer has shipped it.", alias="cancellationRequest")
    fulfilment: Optional[OrderFulfilment] = None
    offer: Optional[OrderOffer] = None
    product: Optional[OrderProduct] = None
    quantity: StrictInt = Field(description="Amount of ordered products for this order item id.")
    quantity_shipped: StrictInt = Field(description="Amount of shipped products for this order item id.", alias="quantityShipped")
    quantity_cancelled: StrictInt = Field(description="Amount of cancelled products for this order item id.", alias="quantityCancelled")
    unit_price: Union[StrictFloat, StrictInt] = Field(description="The selling price to the customer of a single unit including VAT.", alias="unitPrice")
    commission: Union[StrictFloat, StrictInt] = Field(description="The commission for all quantities of this order item.")
    additional_services: Optional[List[AdditionalService]] = Field(default=None, alias="additionalServices")
    latest_changed_date_time: datetime = Field(description="The date and time in ISO 8601 format when the orderItem was last changed.", alias="latestChangedDateTime")
    __properties: ClassVar[List[str]] = ["orderItemId", "cancellationRequest", "fulfilment", "offer", "product", "quantity", "quantityShipped", "quantityCancelled", "unitPrice", "commission", "additionalServices", "latestChangedDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderOrderItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fulfilment
        if self.fulfilment:
            _dict['fulfilment'] = self.fulfilment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offer
        if self.offer:
            _dict['offer'] = self.offer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in additional_services (list)
        _items = []
        if self.additional_services:
            for _item in self.additional_services:
                if _item:
                    _items.append(_item.to_dict())
            _dict['additionalServices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderOrderItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderItemId": obj.get("orderItemId"),
            "cancellationRequest": obj.get("cancellationRequest"),
            "fulfilment": OrderFulfilment.from_dict(obj["fulfilment"]) if obj.get("fulfilment") is not None else None,
            "offer": OrderOffer.from_dict(obj["offer"]) if obj.get("offer") is not None else None,
            "product": OrderProduct.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "quantity": obj.get("quantity"),
            "quantityShipped": obj.get("quantityShipped"),
            "quantityCancelled": obj.get("quantityCancelled"),
            "unitPrice": obj.get("unitPrice"),
            "commission": obj.get("commission"),
            "additionalServices": [AdditionalService.from_dict(_item) for _item in obj["additionalServices"]] if obj.get("additionalServices") is not None else None,
            "latestChangedDateTime": obj.get("latestChangedDateTime")
        })
        return _obj


