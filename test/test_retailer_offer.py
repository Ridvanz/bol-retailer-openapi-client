# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.retailer_offer import RetailerOffer

class TestRetailerOffer(unittest.TestCase):
    """RetailerOffer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RetailerOffer:
        """Test RetailerOffer
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RetailerOffer`
        """
        model = RetailerOffer()
        if include_optional:
            return RetailerOffer(
                offer_id = '6ff736b5-cdd0-4150-8c67-78269ee986f5',
                ean = '0000007740404',
                reference = 'REF12345',
                on_hold_by_retailer = False,
                unknown_product_title = 'Unknown Product Title',
                pricing = openapi_client.models.pricing.Pricing(
                    bundle_prices = [
                        openapi_client.models.bundle_price.BundlePrice(
                            quantity = 1, 
                            unit_price = 9.99, )
                        ], ),
                stock = openapi_client.models.stock.Stock(
                    amount = 6, 
                    corrected_stock = 5, 
                    managed_by_retailer = False, ),
                fulfilment = openapi_client.models.fulfilment.Fulfilment(
                    method = 'FBR', 
                    delivery_code = '24uurs-23', ),
                store = openapi_client.models.store.Store(
                    product_title = 'Product Title', 
                    visible = [
                        openapi_client.models.offers_country_code.OffersCountryCode(
                            country_code = 'NL', )
                        ], ),
                condition = openapi_client.models.condition.Condition(
                    name = 'AS_NEW', 
                    category = 'SECONDHAND', 
                    comment = 'Heeft een koffie vlek op de kaft.', ),
                not_publishable_reasons = [
                    openapi_client.models.not_publishable_reason.NotPublishableReason(
                        code = '4003', 
                        description = 'The seller is on holiday.', )
                    ]
            )
        else:
            return RetailerOffer(
                offer_id = '6ff736b5-cdd0-4150-8c67-78269ee986f5',
                ean = '0000007740404',
                on_hold_by_retailer = False,
                pricing = openapi_client.models.pricing.Pricing(
                    bundle_prices = [
                        openapi_client.models.bundle_price.BundlePrice(
                            quantity = 1, 
                            unit_price = 9.99, )
                        ], ),
                stock = openapi_client.models.stock.Stock(
                    amount = 6, 
                    corrected_stock = 5, 
                    managed_by_retailer = False, ),
                fulfilment = openapi_client.models.fulfilment.Fulfilment(
                    method = 'FBR', 
                    delivery_code = '24uurs-23', ),
                store = openapi_client.models.store.Store(
                    product_title = 'Product Title', 
                    visible = [
                        openapi_client.models.offers_country_code.OffersCountryCode(
                            country_code = 'NL', )
                        ], ),
                condition = openapi_client.models.condition.Condition(
                    name = 'AS_NEW', 
                    category = 'SECONDHAND', 
                    comment = 'Heeft een koffie vlek op de kaft.', ),
                not_publishable_reasons = [
                    openapi_client.models.not_publishable_reason.NotPublishableReason(
                        code = '4003', 
                        description = 'The seller is on holiday.', )
                    ],
        )
        """

    def testRetailerOffer(self):
        """Test RetailerOffer"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
