# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.catalog_product import CatalogProduct

class TestCatalogProduct(unittest.TestCase):
    """CatalogProduct unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CatalogProduct:
        """Test CatalogProduct
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CatalogProduct`
        """
        model = CatalogProduct()
        if include_optional:
            return CatalogProduct(
                published = True,
                gpc = openapi_client.models.gpc.Gpc(
                    chunk_id = '30005965', ),
                enrichment = openapi_client.models.enrichment.Enrichment(
                    status = 1, ),
                attributes = [
                    openapi_client.models.attributes.Attributes(
                        id = 'Appearance Name', 
                        values = [
                            openapi_client.models.values.Values(
                                value = '122', 
                                unit_id = 'unece.unit.MMT', 
                                value_id = '700071825', )
                            ], )
                    ],
                parties = [
                    openapi_client.models.party.Party(
                        name = 'Maybelline', 
                        type = 'Brand', 
                        role = 'BRAND', )
                    ],
                audio_tracks = [
                    openapi_client.models.audio_tracks.AudioTracks(
                        disc_number = '1', 
                        track_number = '14', 
                        disc_side = 'A', 
                        title = 'Back home', 
                        artist_name = 'Golden Earring', 
                        play_time = '3:51', 
                        clip_url = 'https://example.com/ABC.mp3', 
                        clip_type = 'mp3', )
                    ],
                series = [
                    openapi_client.models.serie.Serie(
                        name = 'Maybelline Lash Sensational', )
                    ]
            )
        else:
            return CatalogProduct(
                published = True,
                gpc = openapi_client.models.gpc.Gpc(
                    chunk_id = '30005965', ),
                attributes = [
                    openapi_client.models.attributes.Attributes(
                        id = 'Appearance Name', 
                        values = [
                            openapi_client.models.values.Values(
                                value = '122', 
                                unit_id = 'unece.unit.MMT', 
                                value_id = '700071825', )
                            ], )
                    ],
                parties = [
                    openapi_client.models.party.Party(
                        name = 'Maybelline', 
                        type = 'Brand', 
                        role = 'BRAND', )
                    ],
        )
        """

    def testCatalogProduct(self):
        """Test CatalogProduct"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
