# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.performance_indicator import PerformanceIndicator

class TestPerformanceIndicator(unittest.TestCase):
    """PerformanceIndicator unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PerformanceIndicator:
        """Test PerformanceIndicator
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PerformanceIndicator`
        """
        model = PerformanceIndicator()
        if include_optional:
            return PerformanceIndicator(
                name = 'CANCELLATIONS',
                type = 'PERCENTAGE',
                details = openapi_client.models.details.Details(
                    period = openapi_client.models.performance_indicator_period.PerformanceIndicatorPeriod(
                        week = '05', 
                        year = '2019', ), 
                    score = openapi_client.models.score.Score(
                        conforms = True, 
                        numerator = 5, 
                        denominator = 10, 
                        value = 0.5, 
                        distance_to_norm = 0.1, ), 
                    norm = openapi_client.models.norm.Norm(
                        condition = '<=', 
                        value = 0.6, ), )
            )
        else:
            return PerformanceIndicator(
                name = 'CANCELLATIONS',
                type = 'PERCENTAGE',
                details = openapi_client.models.details.Details(
                    period = openapi_client.models.performance_indicator_period.PerformanceIndicatorPeriod(
                        week = '05', 
                        year = '2019', ), 
                    score = openapi_client.models.score.Score(
                        conforms = True, 
                        numerator = 5, 
                        denominator = 10, 
                        value = 0.5, 
                        distance_to_norm = 0.1, ), 
                    norm = openapi_client.models.norm.Norm(
                        condition = '<=', 
                        value = 0.6, ), ),
        )
        """

    def testPerformanceIndicator(self):
        """Test PerformanceIndicator"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
