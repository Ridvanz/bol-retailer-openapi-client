# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_replenishment_request import CreateReplenishmentRequest

class TestCreateReplenishmentRequest(unittest.TestCase):
    """CreateReplenishmentRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateReplenishmentRequest:
        """Test CreateReplenishmentRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateReplenishmentRequest`
        """
        model = CreateReplenishmentRequest()
        if include_optional:
            return CreateReplenishmentRequest(
                reference = 'REFERENCE1',
                delivery_info = openapi_client.models.create_delivery_info.CreateDeliveryInfo(
                    expected_delivery_date = '2021-01-01', 
                    transporter_code = 'POSTNL', ),
                labeling_by_bol = False,
                number_of_load_carriers = 10,
                pickup_appointment = openapi_client.models.create_pickup_appointment.CreatePickupAppointment(
                    address = openapi_client.models.create_address.CreateAddress(
                        street_name = 'Dorpstraat', 
                        house_number = '1', 
                        zip_code = '1111ZZ', 
                        house_number_extension = 'B', 
                        city = 'Utrecht', 
                        country_code = 'NL', 
                        attention_of = 'Billie Bol', ), 
                    pickup_time_slot = openapi_client.models.create_pickup_time_slot.CreatePickupTimeSlot(
                        from_date_time = '2021-01-01T09:00:00+01:00', 
                        until_date_time = '2021-01-01T10:00:00+01:00', ), 
                    comment_to_transporter = 'Eerste verdieping.', ),
                lines = [
                    openapi_client.models.create_replenishment_line.CreateReplenishmentLine(
                        ean = '0000007740404', 
                        quantity = 1, )
                    ]
            )
        else:
            return CreateReplenishmentRequest(
                reference = 'REFERENCE1',
                labeling_by_bol = False,
                number_of_load_carriers = 10,
                lines = [
                    openapi_client.models.create_replenishment_line.CreateReplenishmentLine(
                        ean = '0000007740404', 
                        quantity = 1, )
                    ],
        )
        """

    def testCreateReplenishmentRequest(self):
        """Test CreateReplenishmentRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
