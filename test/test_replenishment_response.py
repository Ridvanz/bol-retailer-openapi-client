# coding: utf-8

"""
    v10 - Retailer API

    The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html) 

    The version of the OpenAPI document: 10.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.replenishment_response import ReplenishmentResponse

class TestReplenishmentResponse(unittest.TestCase):
    """ReplenishmentResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReplenishmentResponse:
        """Test ReplenishmentResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReplenishmentResponse`
        """
        model = ReplenishmentResponse()
        if include_optional:
            return ReplenishmentResponse(
                replenishment_id = '2312078154',
                creation_date_time = '2021-01-01T08:00+01:00',
                reference = 'REFERENCE1',
                labeling_by_bol = False,
                state = 'ANNOUNCED',
                delivery_information = openapi_client.models.delivery_information.DeliveryInformation(
                    expected_delivery_date = 'Sat Jan 02 00:00:00 UTC 2021', 
                    transporter_code = 'POSTNL', 
                    destination_warehouse = openapi_client.models.destination_warehouse.DestinationWarehouse(
                        street_name = 'Industrieweg', 
                        house_number = '1', 
                        house_number_extension = 'B', 
                        zip_code = '1111ZZ', 
                        city = 'Waalwijk', 
                        country_code = 'NL', 
                        attention_of = 't.a.v. bol.com', ), ),
                pickup_appointment = openapi_client.models.pickup_appointment.PickupAppointment(
                    comment_to_transporter = 'Eerste verdieping.', 
                    address = openapi_client.models.address.Address(
                        street_name = 'Dorpstraat', 
                        house_number = '1', 
                        house_number_extension = 'B', 
                        zip_code = '1111ZZ', 
                        city = 'Utrecht', 
                        country_code = 'NL', 
                        attention_of = 'Jan Jansen', ), 
                    pickup_time_slot = openapi_client.models.replenishment_pickup_time_slot.ReplenishmentPickupTimeSlot(
                        from_date_time = '2021-01-01T09:00+01:00', 
                        until_date_time = '2021-01-01T10:00+01:00', ), 
                    pickup_date_time = '2021-01-01T09:00+01:00', 
                    cancellation_reason = 'NOT_AT_HOME', ),
                number_of_load_carriers = 1,
                load_carriers = [
                    openapi_client.models.load_carrier.LoadCarrier(
                        sscc = '020001200000007000', 
                        transport_label_track_and_trace = '3SJTXX216692157', 
                        transport_state = 'ANNOUNCED', 
                        transport_state_update_date_time = '2021-01-02T09:00+01:00', )
                    ],
                lines = [
                    openapi_client.models.replenishment_line.ReplenishmentLine(
                        ean = '0000007740404', 
                        line_state = 'ANNOUNCED', 
                        quantity_announced = 1, 
                        quantity_received = 0, 
                        quantity_in_progress = 0, 
                        quantity_with_graded_state = 0, 
                        quantity_with_regular_state = 0, )
                    ],
                invalid_lines = [
                    openapi_client.models.invalid_replenishment_line.InvalidReplenishmentLine(
                        type = 'UNKNOWN_FBB_PRODUCT', 
                        quantity_announced = 1, 
                        quantity_received = 0, 
                        quantity_in_progress = 0, 
                        quantity_with_graded_state = 0, 
                        quantity_with_regular_state = 0, )
                    ],
                state_transitions = [
                    openapi_client.models.state_transition.StateTransition(
                        state = 'ANNOUNCED', 
                        state_date_time = '2021-01-02T09:00+01:00', )
                    ]
            )
        else:
            return ReplenishmentResponse(
                replenishment_id = '2312078154',
                creation_date_time = '2021-01-01T08:00+01:00',
                reference = 'REFERENCE1',
                labeling_by_bol = False,
                state = 'ANNOUNCED',
                delivery_information = openapi_client.models.delivery_information.DeliveryInformation(
                    expected_delivery_date = 'Sat Jan 02 00:00:00 UTC 2021', 
                    transporter_code = 'POSTNL', 
                    destination_warehouse = openapi_client.models.destination_warehouse.DestinationWarehouse(
                        street_name = 'Industrieweg', 
                        house_number = '1', 
                        house_number_extension = 'B', 
                        zip_code = '1111ZZ', 
                        city = 'Waalwijk', 
                        country_code = 'NL', 
                        attention_of = 't.a.v. bol.com', ), ),
                load_carriers = [
                    openapi_client.models.load_carrier.LoadCarrier(
                        sscc = '020001200000007000', 
                        transport_label_track_and_trace = '3SJTXX216692157', 
                        transport_state = 'ANNOUNCED', 
                        transport_state_update_date_time = '2021-01-02T09:00+01:00', )
                    ],
                lines = [
                    openapi_client.models.replenishment_line.ReplenishmentLine(
                        ean = '0000007740404', 
                        line_state = 'ANNOUNCED', 
                        quantity_announced = 1, 
                        quantity_received = 0, 
                        quantity_in_progress = 0, 
                        quantity_with_graded_state = 0, 
                        quantity_with_regular_state = 0, )
                    ],
                invalid_lines = [
                    openapi_client.models.invalid_replenishment_line.InvalidReplenishmentLine(
                        type = 'UNKNOWN_FBB_PRODUCT', 
                        quantity_announced = 1, 
                        quantity_received = 0, 
                        quantity_in_progress = 0, 
                        quantity_with_graded_state = 0, 
                        quantity_with_regular_state = 0, )
                    ],
                state_transitions = [
                    openapi_client.models.state_transition.StateTransition(
                        state = 'ANNOUNCED', 
                        state_date_time = '2021-01-02T09:00+01:00', )
                    ],
        )
        """

    def testReplenishmentResponse(self):
        """Test ReplenishmentResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
